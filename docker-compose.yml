services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: n8n-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: n8n
      POSTGRES_USER: n8n
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-n8n_secure_password}
      POSTGRES_NON_ROOT_USER: n8n
      POSTGRES_NON_ROOT_PASSWORD: ${POSTGRES_PASSWORD:-n8n_secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-data.sh:/docker-entrypoint-initdb.d/init-data.sh
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U n8n -d n8n']
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - n8n-network

  # Redis for Queue and Cache
  redis:
    image: redis:7-alpine
    container_name: n8n-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_secure_password}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - n8n-network

  # n8n Main Application
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n-app
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Database Configuration
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: n8n
      DB_POSTGRESDB_USER: n8n
      DB_POSTGRESDB_PASSWORD: ${POSTGRES_PASSWORD:-n8n_secure_password}
      
      # Redis Configuration
      QUEUE_BULL_REDIS_HOST: redis
      QUEUE_BULL_REDIS_PORT: 6379
      QUEUE_BULL_REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_secure_password}
      
      # Security Configuration
      N8N_ENCRYPTION_KEY: ${N8N_ENCRYPTION_KEY:-your-very-secure-encryption-key-here}
      N8N_USER_MANAGEMENT_JWT_SECRET: ${N8N_JWT_SECRET:-your-jwt-secret-key-here}
      
      # Basic Auth (Optional - remove if using other auth methods)
      N8N_BASIC_AUTH_ACTIVE: ${N8N_BASIC_AUTH_ACTIVE:-true}
      N8N_BASIC_AUTH_USER: ${N8N_BASIC_AUTH_USER:-admin}
      N8N_BASIC_AUTH_PASSWORD: ${N8N_BASIC_AUTH_PASSWORD:-admin_password}
      
      # Application Configuration
      N8N_HOST: ${N8N_HOST:-localhost}
      N8N_PORT: 5678
      N8N_PROTOCOL: ${N8N_PROTOCOL:-https}
      WEBHOOK_URL: ${WEBHOOK_URL:-https://localhost:5678}
      
      # SSL Configuration
      N8N_SSL_KEY: /etc/ssl/private/key.pem
      N8N_SSL_CERT: /etc/ssl/certs/cert.pem
      
      # Logging
      N8N_LOG_LEVEL: ${N8N_LOG_LEVEL:-info}
      N8N_LOG_OUTPUT: ${N8N_LOG_OUTPUT:-console,file}
      N8N_LOG_FILE_LOCATION: /home/node/.n8n/logs/
      
      # Task Runner Configuration
      N8N_RUNNERS_ENABLED: ${N8N_RUNNERS_ENABLED:-true}
      
      # Performance
      EXECUTIONS_TIMEOUT: ${EXECUTIONS_TIMEOUT:-3600}
      EXECUTIONS_TIMEOUT_MAX: ${EXECUTIONS_TIMEOUT_MAX:-7200}
      
      # Generic Timezone
      GENERIC_TIMEZONE: ${GENERIC_TIMEZONE:-UTC}
      
      # Disable telemetry
      N8N_DIAGNOSTICS_ENABLED: false
      N8N_VERSION_NOTIFICATIONS_ENABLED: false
      N8N_TEMPLATES_ENABLED: true
      
      # User Management
      N8N_USER_MANAGEMENT_DISABLED: ${N8N_USER_MANAGEMENT_DISABLED:-false}
      N8N_PUBLIC_API_DISABLED: ${N8N_PUBLIC_API_DISABLED:-false}
      
      # Metrics
      N8N_METRICS: ${N8N_METRICS:-false}
      N8N_METRICS_PREFIX: n8n_
      
      # Editor Configuration
      N8N_EDITOR_BASE_URL: ${N8N_EDITOR_BASE_URL:-https://localhost:5678}
      
      # Workflow Configuration
      WORKFLOWS_DEFAULT_NAME: ${WORKFLOWS_DEFAULT_NAME:-My Workflow}
      
      # Node.js Configuration
      NODE_ENV: ${NODE_ENV:-production}
      NODE_FUNCTION_ALLOW_BUILTIN: ${NODE_FUNCTION_ALLOW_BUILTIN:-*}
      NODE_FUNCTION_ALLOW_EXTERNAL: ${NODE_FUNCTION_ALLOW_EXTERNAL:-*}
    ports:
      - "${N8N_PORT:-5678}:5678"
    volumes:
      - n8n_data:/home/node/.n8n
      - ./files:/home/node/.n8n/files
      - ./files/cert.pem:/etc/ssl/certs/cert.pem:ro
      - ./files/key.pem:/etc/ssl/private/key.pem:ro
      - ./files/mbma-chain.pem:/etc/ssl/certs/mbma-chain.pem:ro
    networks:
      - n8n-network
    healthcheck:
      test: ['CMD-SHELL', 'wget --no-verbose --tries=1 --spider --no-check-certificate https://localhost:5678/healthz || exit 1']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    security_opt:
      - no-new-privileges:true
    user: "1000:1000"

  # n8n Workers removed - using built-in task runners instead
  # Modern n8n versions handle scaling with N8N_RUNNERS_ENABLED=true

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: n8n-nginx
    restart: unless-stopped
    depends_on:
      - n8n
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./files/cert.pem:/etc/ssl/certs/cert.pem:ro
      - ./files/key.pem:/etc/ssl/private/key.pem:ro
      - ./files/mbma-chain.pem:/etc/ssl/certs/mbma-chain.pem:ro
    networks:
      - n8n-network
    healthcheck:
      test: ['CMD', 'wget', '--no-verbose', '--tries=1', '--spider', 'http://localhost/health']
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  n8n_data:
    driver: local

networks:
  n8n-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16